<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classOpenColorIO_1_1Baker" kind="class" language="C++" prot="public">
    <compoundname>OpenColorIO::Baker</compoundname>
    <includes refid="OpenColorIO_8h" local="no">OpenColorIO.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classOpenColorIO_1_1Baker_1a1b25267d082e82479d08cacb7d8ff2c8" prot="private" static="no" mutable="no">
        <type>Impl *</type>
        <definition>Impl* OpenColorIO::Baker::m_impl</definition>
        <argsstring></argsstring>
        <name>m_impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1544" column="11" bodyfile="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" bodystart="1543" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a86ca9609837ac90e167c37fead89ba6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BakerRcPtr</type>
        <definition>static BakerRcPtr OpenColorIO::Baker::Create</definition>
        <argsstring>()</argsstring>
        <name>Create</name>
        <briefdescription>
<para>Create a new <ref refid="classOpenColorIO_1_1Baker" kindref="compound">Baker</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1455" column="23"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1ac812d76fbeaa850b911f656d1293ebd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int OpenColorIO::Baker::getNumFormats</definition>
        <argsstring>()</argsstring>
        <name>getNumFormats</name>
        <briefdescription>
<para>Get the number of LUT bakers. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1523" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a41d565e3ecbbc1a520a20139b7b58833" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* OpenColorIO::Baker::getFormatNameByIndex</definition>
        <argsstring>(int index)</argsstring>
        <name>getFormatNameByIndex</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the LUT baker format name at index, return empty string if an invalid index is specified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1527" column="24"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a38a91df77adb710033e764fc223eefa7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>static const char* OpenColorIO::Baker::getFormatExtensionByIndex</definition>
        <argsstring>(int index)</argsstring>
        <name>getFormatExtensionByIndex</name>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the LUT baker format extension at index, return empty string if an invalid index is specified. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1531" column="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1aeac3955f3772275df82020860042dc76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>BakerRcPtr</type>
        <definition>BakerRcPtr OpenColorIO::Baker::createEditableCopy</definition>
        <argsstring>() const</argsstring>
        <name>createEditableCopy</name>
        <briefdescription>
<para>Create a copy of this <ref refid="classOpenColorIO_1_1Baker" kindref="compound">Baker</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1458" column="16"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a85976e0882bbaa8850da6c132d0f90a6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>ConstConfigRcPtr</type>
        <definition>ConstConfigRcPtr OpenColorIO::Baker::getConfig</definition>
        <argsstring>() const</argsstring>
        <name>getConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1460" column="22"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a6ac7e69d05bb62a4b6aae063d671396d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenColorIO::Baker::setConfig</definition>
        <argsstring>(const ConstConfigRcPtr &amp;config)</argsstring>
        <name>setConfig</name>
        <param>
          <type>const ConstConfigRcPtr &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
<para>Set the config to use. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1462" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a0cd3710f746bf1632da007c47fff2849" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* OpenColorIO::Baker::getFormat</definition>
        <argsstring>() const</argsstring>
        <name>getFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1464" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a61e7ad0ac34879ac95b3b31ad9e895ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenColorIO::Baker::setFormat</definition>
        <argsstring>(const char *formatName)</argsstring>
        <name>setFormat</name>
        <param>
          <type>const char *</type>
          <declname>formatName</declname>
        </param>
        <briefdescription>
<para>Set the LUT output format. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1466" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a7341146e99f74c86c5b5705f39322e04" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classOpenColorIO_1_1FormatMetadata" kindref="compound">FormatMetadata</ref> &amp;</type>
        <definition>const FormatMetadata&amp; OpenColorIO::Baker::getFormatMetadata</definition>
        <argsstring>() const</argsstring>
        <name>getFormatMetadata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1469" column="27"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1aa5c7d0c7e4379724280dae11e5406d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenColorIO_1_1FormatMetadata" kindref="compound">FormatMetadata</ref> &amp;</type>
        <definition>FormatMetadata&amp; OpenColorIO::Baker::getFormatMetadata</definition>
        <argsstring>()</argsstring>
        <name>getFormatMetadata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get editable <emphasis>optional</emphasis> format metadata. The metadata that will be used varies based on the capability of the given file format. Formats such as CSP, IridasCube, and ResolveCube will create comments in the file header using the value of any first-level children elements of the formatMetadata. The CLF/CTF formats will make use of the top-level &quot;id&quot; and &quot;name&quot; attributes and children elements &quot;Description&quot;, &quot;InputDescriptor&quot;, &quot;OutputDescriptor&quot;, and &quot;Info&quot;. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1479" column="21"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a1e49fd4fad1d2dcbca5d5d28547b021a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* OpenColorIO::Baker::getInputSpace</definition>
        <argsstring>() const</argsstring>
        <name>getInputSpace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1481" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1ad745e5948341ea7bdbaf3526d87acb7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenColorIO::Baker::setInputSpace</definition>
        <argsstring>(const char *inputSpace)</argsstring>
        <name>setInputSpace</name>
        <param>
          <type>const char *</type>
          <declname>inputSpace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the input <ref refid="classOpenColorIO_1_1ColorSpace" kindref="compound">ColorSpace</ref> that the LUT will be applied to. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inputSpace</parametername>
</parameternamelist>
<parameterdescription>
<para>The input <ref refid="classOpenColorIO_1_1ColorSpace" kindref="compound">ColorSpace</ref> to use. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1485" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a12f2f0809b6e73dee263b07208f51a67" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* OpenColorIO::Baker::getShaperSpace</definition>
        <argsstring>() const</argsstring>
        <name>getShaperSpace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1487" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a048335330ab98ee60791cb293b97f8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenColorIO::Baker::setShaperSpace</definition>
        <argsstring>(const char *shaperSpace)</argsstring>
        <name>setShaperSpace</name>
        <param>
          <type>const char *</type>
          <declname>shaperSpace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an <emphasis>optional</emphasis> <ref refid="classOpenColorIO_1_1ColorSpace" kindref="compound">ColorSpace</ref> to be used to shape / transfer the input colorspace. This is mostly used to allocate an HDR luminance range into an LDR one. If a shaper space is not explicitly specified, and the file format supports one, the <ref refid="classOpenColorIO_1_1ColorSpace" kindref="compound">ColorSpace</ref> Allocation will be used (not implemented for all formats). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1493" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a5da8e0e801379734352984607df0c929" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* OpenColorIO::Baker::getLooks</definition>
        <argsstring>() const</argsstring>
        <name>getLooks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1495" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1acfb3ddd0b4260daeffd4de773c2f9bab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenColorIO::Baker::setLooks</definition>
        <argsstring>(const char *looks)</argsstring>
        <name>setLooks</name>
        <param>
          <type>const char *</type>
          <declname>looks</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the looks to be applied during baking. Looks is a potentially comma (or colon) delimited list of lookNames, where +/- prefixes are optionally allowed to denote forward/inverse look specification. (And forward is assumed in the absence of either). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1501" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1adca363cae5758ffb7e7cef9279692d7c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* OpenColorIO::Baker::getTargetSpace</definition>
        <argsstring>() const</argsstring>
        <name>getTargetSpace</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1503" column="17"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a65c3919e61fa953dc128671882f8aa1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenColorIO::Baker::setTargetSpace</definition>
        <argsstring>(const char *targetSpace)</argsstring>
        <name>setTargetSpace</name>
        <param>
          <type>const char *</type>
          <declname>targetSpace</declname>
        </param>
        <briefdescription>
<para>Set the target device colorspace for the LUT. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1505" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a9aadda5c505a71fe5474113ac39b88e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenColorIO::Baker::getShaperSize</definition>
        <argsstring>() const</argsstring>
        <name>getShaperSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1507" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1ac9b28a91467f31bab3128141b42af298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenColorIO::Baker::setShaperSize</definition>
        <argsstring>(int shapersize)</argsstring>
        <name>setShaperSize</name>
        <param>
          <type>int</type>
          <declname>shapersize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Override the default shaper LUT size. Default value is -1, which allows each format to use its own most appropriate size. For the CLF format, the default uses a half-domain LUT1D (which is ideal for scene-linear inputs). </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1511" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a6cf7fc36ca20121b6183c2ee0b1b2066" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int OpenColorIO::Baker::getCubeSize</definition>
        <argsstring>() const</argsstring>
        <name>getCubeSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1513" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1ae0b4c5f192769904f6579828407bf540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenColorIO::Baker::setCubeSize</definition>
        <argsstring>(int cubesize)</argsstring>
        <name>setCubeSize</name>
        <param>
          <type>int</type>
          <declname>cubesize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Override the default cube sample size. default: &lt;format specific&gt; </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1517" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1aafdab725623c5f6a3ca0b148dcf040c1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OpenColorIO::Baker::bake</definition>
        <argsstring>(std::ostream &amp;os) const</argsstring>
        <name>bake</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
<para>Bake the LUT into the output stream. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1520" column="10"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1ad40b71abfde2ad606d9e2006e42fb551" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>OpenColorIO::Baker::~Baker</definition>
        <argsstring>()</argsstring>
        <name>~Baker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1533" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1abeb86cab7976d5d1778f9c71d5fe3efe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>OpenColorIO::Baker::Baker</definition>
        <argsstring>()</argsstring>
        <name>Baker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1536" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a5aa530e157ba61793deb965f5e8b2aed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>OpenColorIO::Baker::Baker</definition>
        <argsstring>(const Baker &amp;)</argsstring>
        <name>Baker</name>
        <param>
          <type>const <ref refid="classOpenColorIO_1_1Baker" kindref="compound">Baker</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1538" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1aa61575069eabd3b16a9947de22dcdc6e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classOpenColorIO_1_1Baker" kindref="compound">Baker</ref> &amp;</type>
        <definition>Baker&amp; OpenColorIO::Baker::operator=</definition>
        <argsstring>(const Baker &amp;)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classOpenColorIO_1_1Baker" kindref="compound">Baker</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1539" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a1b988f4dc2e2ef7d83180415805f38f2" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Impl *</type>
        <definition>Impl* OpenColorIO::Baker::getImpl</definition>
        <argsstring>()</argsstring>
        <name>getImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1545" column="11" bodyfile="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" bodystart="1545" bodyend="1545"/>
      </memberdef>
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a88b0ca2e74c9bc85ada2f3dc2009c15b" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Impl *</type>
        <definition>const Impl* OpenColorIO::Baker::getImpl</definition>
        <argsstring>() const</argsstring>
        <name>getImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1546" column="17" bodyfile="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" bodystart="1546" bodyend="1546"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classOpenColorIO_1_1Baker_1a3088cf71b451055f1bf181c969a2ab84" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void OpenColorIO::Baker::deleter</definition>
        <argsstring>(Baker *o)</argsstring>
        <name>deleter</name>
        <param>
          <type><ref refid="classOpenColorIO_1_1Baker" kindref="compound">Baker</ref> *</type>
          <declname>o</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1541" column="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>In certain situations it is necessary to serialize transforms into a variety of application specific LUT formats. Note that not all file formats that may be read also support baking.</para>
<para><bold>Usage Example:</bold> <emphasis>Bake a CSP sRGB viewer LUT</emphasis></para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">OCIO::ConstConfigRcPtr<sp/>config<sp/>=<sp/>OCIO::Config::CreateFromEnv();</highlight></codeline>
<codeline><highlight class="normal">OCIO::BakerRcPtr<sp/>baker<sp/>=<sp/>OCIO::Baker::Create();</highlight></codeline>
<codeline><highlight class="normal">baker-&gt;setConfig(config);</highlight></codeline>
<codeline><highlight class="normal">baker-&gt;setFormat(</highlight><highlight class="stringliteral">&quot;csp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">baker-&gt;setInputSpace(</highlight><highlight class="stringliteral">&quot;lnf&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">baker-&gt;setShaperSpace(</highlight><highlight class="stringliteral">&quot;log&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">baker-&gt;setTargetSpace(</highlight><highlight class="stringliteral">&quot;sRGB&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;<sp/>metadata<sp/>=<sp/>baker-&gt;getFormatMetadata();</highlight></codeline>
<codeline><highlight class="normal">metadata.addChildElement(OCIO::METADATA_DESCRIPTION,<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>first<sp/>comment&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">metadata.addChildElement(OCIO::METADATA_DESCRIPTION,<sp/></highlight><highlight class="stringliteral">&quot;A<sp/>second<sp/>comment&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">std::ostringstream<sp/>out;</highlight></codeline>
<codeline><highlight class="normal">baker-&gt;bake(out);<sp/></highlight><highlight class="comment">//<sp/>fresh<sp/>bread<sp/>anyone!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>out.str();</highlight></codeline>
</programlisting></para>
<para><programlisting filename=".py"><codeline><highlight class="normal">x<sp/>=<sp/><ref refid="classOpenColorIO_1_1Baker" kindref="compound">OpenColorIO.Baker</ref>()</highlight></codeline>
<codeline><highlight class="normal">x.setConfig()</highlight></codeline>
<codeline><highlight class="normal">x.setFormat(</highlight><highlight class="stringliteral">&quot;csp&quot;</highlight><highlight class="normal">)</highlight></codeline>
</programlisting> </para>
    </detaileddescription>
    <location file="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" line="1452" column="1" bodyfile="/home/fawlty/temp_dev/OpenColorIO-2/include/OpenColorIO/OpenColorIO.h" bodystart="1451" bodyend="1547"/>
    <listofallmembers>
      <member refid="classOpenColorIO_1_1Baker_1aafdab725623c5f6a3ca0b148dcf040c1" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>bake</name></member>
      <member refid="classOpenColorIO_1_1Baker_1abeb86cab7976d5d1778f9c71d5fe3efe" prot="private" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>Baker</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a5aa530e157ba61793deb965f5e8b2aed" prot="private" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>Baker</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a86ca9609837ac90e167c37fead89ba6e" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>Create</name></member>
      <member refid="classOpenColorIO_1_1Baker_1aeac3955f3772275df82020860042dc76" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>createEditableCopy</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a3088cf71b451055f1bf181c969a2ab84" prot="private" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>deleter</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a85976e0882bbaa8850da6c132d0f90a6" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getConfig</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a6cf7fc36ca20121b6183c2ee0b1b2066" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getCubeSize</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a0cd3710f746bf1632da007c47fff2849" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getFormat</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a38a91df77adb710033e764fc223eefa7" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getFormatExtensionByIndex</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a7341146e99f74c86c5b5705f39322e04" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getFormatMetadata</name></member>
      <member refid="classOpenColorIO_1_1Baker_1aa5c7d0c7e4379724280dae11e5406d8e" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getFormatMetadata</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a41d565e3ecbbc1a520a20139b7b58833" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getFormatNameByIndex</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a1b988f4dc2e2ef7d83180415805f38f2" prot="private" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getImpl</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a88b0ca2e74c9bc85ada2f3dc2009c15b" prot="private" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getImpl</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a1e49fd4fad1d2dcbca5d5d28547b021a" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getInputSpace</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a5da8e0e801379734352984607df0c929" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getLooks</name></member>
      <member refid="classOpenColorIO_1_1Baker_1ac812d76fbeaa850b911f656d1293ebd4" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getNumFormats</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a9aadda5c505a71fe5474113ac39b88e9" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getShaperSize</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a12f2f0809b6e73dee263b07208f51a67" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getShaperSpace</name></member>
      <member refid="classOpenColorIO_1_1Baker_1adca363cae5758ffb7e7cef9279692d7c" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>getTargetSpace</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a1b25267d082e82479d08cacb7d8ff2c8" prot="private" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>m_impl</name></member>
      <member refid="classOpenColorIO_1_1Baker_1aa61575069eabd3b16a9947de22dcdc6e" prot="private" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>operator=</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a6ac7e69d05bb62a4b6aae063d671396d" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>setConfig</name></member>
      <member refid="classOpenColorIO_1_1Baker_1ae0b4c5f192769904f6579828407bf540" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>setCubeSize</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a61e7ad0ac34879ac95b3b31ad9e895ef" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>setFormat</name></member>
      <member refid="classOpenColorIO_1_1Baker_1ad745e5948341ea7bdbaf3526d87acb7d" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>setInputSpace</name></member>
      <member refid="classOpenColorIO_1_1Baker_1acfb3ddd0b4260daeffd4de773c2f9bab" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>setLooks</name></member>
      <member refid="classOpenColorIO_1_1Baker_1ac9b28a91467f31bab3128141b42af298" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>setShaperSize</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a048335330ab98ee60791cb293b97f8e4" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>setShaperSpace</name></member>
      <member refid="classOpenColorIO_1_1Baker_1a65c3919e61fa953dc128671882f8aa1c" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>setTargetSpace</name></member>
      <member refid="classOpenColorIO_1_1Baker_1ad40b71abfde2ad606d9e2006e42fb551" prot="public" virt="non-virtual"><scope>OpenColorIO::Baker</scope><name>~Baker</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
